# -*- coding: utf-8 -*-
"""recommend1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zLgQHIPbcUt-ldbRGTUymjVvZclqGrbT

Importing the Dependencies
"""

import numpy as np 
# numpy to create arrays
import pandas as pd
#pandas to provide python dataframes for a better visualisation of data
import difflib 
# difflib is to find the closest match in the name of the searched value
from sklearn.feature_extraction.text import TfidfVectorizer# to convert the textual data into numerical values(feature vectors)
from sklearn.metrics.pairwise import cosine_similarity #to find similar components

"""Data Collection And PreProcessing"""

# loading the data from csv file to a pandas dataframe
movies_data = pd.read_csv('/content/movies.csv')

# printing the first 5 rows of the dataframe
movies_data.head()

# no. of rows and columns in movies_data
movies_data.shape

# selecting the most relevant features for recommendation
selected_features = ['genres' , 'keywords' , 'original_title' , 'tagline' , 'cast' , 'director' ]
print(selected_features)

# replacing the missing values with null string
for feature in selected_features:
  movies_data[feature] = movies_data[feature].fillna('')

#combining all the selected features
combined_selected_features = movies_data['genres'] +' '+ movies_data['keywords'] + ' '+ movies_data['original_title'] +' '+ movies_data['tagline'] +' '+ movies_data['cast'] +' '+ movies_data['director']

print(combined_selected_features)

#converting text data to feature vectors
vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_selected_features)

print(feature_vectors)

"""Finding the similarity score/ Cosine vectors"""

# finding similarity scores using cosine similarity
similarity = cosine_similarity(feature_vectors)
print(similarity)
print(similarity.shape)

#getting the movie name from the user
movie_name = input('Enter Your Favourite Movie Name :')

#creating a list with all the movie names given in the dataset
list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

#now finding the closest match for the movie name provided by the user
find_closest_match = difflib.get_close_matches(movie_name , list_of_all_titles)
print(find_closest_match)

close_match = find_closest_match[0]
print(close_match)

#find index of movie with title

index_of_movie = movies_data[movies_data.title == close_match]['index'].values[0] #finding the columns first row index
print(index_of_movie)

#getting a list of similar movies
similarity_score = list(enumerate(similarity[index_of_movie]))
print(similarity_score)

len(similarity_score)

#sorting movies based on similarity score
sorted_similar_movies = sorted(similarity_score , key = lambda x:x[1] , reverse = True)
print(sorted_similar_movies)

#print the names of similar movies based on indexes
print('suggested results : \n')
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index == index]['title'].values[0]
  if(i<30):
    print(i , '. ' , title_from_index)
    i+=1