# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A5U4spGp3hSrhw4P11BKZahgV_hky1xS
"""

import pandas as pd
from scipy.sparse import csr_matrix # for sparse matrix creation
from sklearn.neighbors import NearestNeighbors

!pip install fuzzywuzzy
!pip install python-Levenshtein

from fuzzywuzzy import process

movies = '/content/movies.csv'
ratings = '/content/ratings.csv'
data=pd.read_csv(movies)
df_movies = pd.read_csv(movies , usecols = ['movieId' , 'title'] , dtype = {'movieId' : 'int32' , 'title' : 'string'})
df_ratings = pd.read_csv(ratings , usecols = ['userId' , 'movieId' , 'rating'] , dtype = {'userId': 'int32' , 'movieId' : 'int32' , 'rating' : 'float32'})

from sklearn.model_selection import train_test_split

df_movies,testX=train_test_split(df_movies, train_size=0.8,random_state=42)

df_movies.columns

df_ratings.columns

df_ratings.shape

df_movies.shape

df_ratings.head()

df_movies.head()

#Sparse matrix creation 
# 1 side - movies and 2 - side - users
#         users
#         4 4 5
# movies  3 5 2    this shows that a particular user has reated a particular movie
#         2 4 5
movie_user_table = df_ratings.pivot(index = 'movieId' , columns = 'userId' , values = 'rating').fillna(0) # to fill all the nonavailable values with 0
mat_movie_users = csr_matrix(movie_user_table.values)

# finding knn using cosine similarity
model_knn = NearestNeighbors(metric = 'cosine' , algorithm = 'brute' , n_neighbors = 20)

model_knn.fit(mat_movie_users)

#Recommending movies - will recommend list of movies

def recommender(data,model, n_recommendations ):
    movie_name=input("Enter the movie name: ")
    model.fit(data)
    idx=process.extractOne(movie_name, df_movies['title'])[2]
    print('Movie Selected: ',df_movies['title'][idx], 'Index: ',idx)
    print('Searching for recommendations.....')
    distances, indices=model.kneighbors(data[idx], n_neighbors=n_recommendations)
    for i in indices:
        print(df_movies['title'][i].where(i!=idx))
    
recommender( mat_movie_users, model_knn,20)

# recommender('toy story ' , mat_movie_users , model_knn , 20)



